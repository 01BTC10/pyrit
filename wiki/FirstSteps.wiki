#summary Getting started

= Getting the code =

First of all, you have to get yourself  a copy of _Pyrit_'s sourcecode. There is no binary distribution, you have to compile it yourself. Get the latest code directly from [http://code.google.com/p/pyrit/source/checkout].

_Pyrit_ consists of two parts: The python-implemented _Pyrit_-classes for managing the blobspace, the commandline-client and such. And the _CPyrit_-extension-module, which features the computational cores written in C.

  * Get yourself a copy of the latest code from [http://code.google.com/p/pyrit/source/checkout]
  * Get yourself a copy of the OpenSSL library and headers. On binary Linux distributions you probably have to install "openssl-dev" or similar named packages.
  * If you have a Nvidia GPU that supports CUDA, you can use _Pyrit_'s CUDA-core for a massive performance gain. Get yourself a copy of the CUDA-compatible drivers and the Toolkit from [http://www.nvidia.com/object/cuda_get.html]. You'll have to symlink the library files into /usr/lib and such.
  * Modify setup.py to your needs
  * Run setup.py to build and install the cpyrit module to your python site-packages. Give 'HAVE_CUDA' as parameter to compile and include Nvidia CUDA support. Give 'HAVE_PADLOCK' as parameter to include support for VIA's padlock engine.

= Using the tools =

Before you use the tool, you should make sure that the code actually works on your platform. There have been reports about some GPU-setups not returning correct results; this is a bug still to be investigated.

Run the _'benchmark'_ command with _pyrit_cli.py_ like the following. Notice that both result hashes are _'OK'_...


 _./pyrit_cli.py benchmark
 
 Benchmarking cores 'Standard CPU', 'Nvidia CUDA' 
 
 Testing CPU-only core 'Standard CPU'... 10000 PMKs in 24.87 seconds: 402.16 PMKs/s Result hash: ef747d123821851a9bd1d1e94ba048ac OK
 
 Testing GPU core 'Nvidia CUDA'... 10000 PMKs in 6.63 seconds: 1509.22 PMKs/s GPU performance: 1133.28 PMKs/s CPU performance: 381.97 PMKs/s Result hash: ef747d123821851a9bd1d1e94ba048ac OK'_


_Pyrit_'s uses two subdirectories for storage: One for the ESSIDs and the PMKs and one for password files. The default for _Pyrit_ is set to 'blobspace/essid' and 'blobspace/password' which will probably be ok for everyone.

  * Create some ESSID using 'pyrit -e FOOBAR create'
  * Import some list of passwords using 'pyrit -f foobar.txt import_passwords'
  * Start batchprocessing using 'pyrit batchprocess'
  * Use the results with cowpatty after doing 'pyrit -e FOOBAR -f output.cow export_cowpatty'
  * See more commands with 'pyrit help'

=Example=
  * Get the code using subversion: _"svn checkout http://pyrit.googlecode.com/svn/trunk/ pyrit"_
  * Make the CLI executable: _"chmod +x pyrit_cli.py"_
  * Compile and install the CPyrit module: _"cd cpyrit && ./setup.py install HAVE_CUDA && cd .."_
  * Create a new ESSID: _"./pyrit_cli.py -e foobar create_essid"_
  * Import a list of passwords: _"./pyrit_cli.py -f list.txt import_passwords"_
  * Run the batch-processing: _"./pyrit_cli.py -e foobar batchprocess"_
  * Export to cowpatty: _"./pyrit_cli.py -e foobar -f output.cow export_cowpatty"_