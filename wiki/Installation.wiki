#summary How to get Pyrit working on your system.
#labels Featured

= Introduction =

This document will guide you through the installation of Pyrit and it's modules.

Pyrit compiles and runs on Linux, FreeBSD and MacOS. Windows is not (and probably never will be) supported; there are however some reports of successful installations on Windows with the help of [http://www.mingw.org/ MinGW].

Pyrit consists of basically two parts:

  * The main module features the commandline-client, the scheduling- and database-code and a basic extension-module that uses the CPU for computation. The main module is required for everyone...
  * There are currently three extension modules that add support for more advanced hardware. The extension modules for [http://www.nvidia.com/object/cuda_home.html Nvidia-CUDA] and [http://www.amd.com/US/PRODUCTS/TECHNOLOGIES/STREAM-TECHNOLOGY/Pages/stream-technology.aspx ATI-Stream] may be installed optionally and are used if available and supported by local hardware. There is also a extension module for [http://www.khronos.org/opencl/ OpenCL] which currently lacks supporting hardware-vendors :-)

You may want to take a look at [http://www.nvidia.com/object/cuda_learn_products.html this page] to find out if your hardware supports [http://www.nvidia.com/object/cuda_home.html Nvidia-CUDA]. People with interest in [http://www.amd.com/US/PRODUCTS/TECHNOLOGIES/STREAM-TECHNOLOGY/Pages/stream-technology.aspx ATI-Stream] can take a look [http://developer.amd.com/gpu/ATIStreamSDK/pages/ATIStreamSystemRequirements.aspx#cards here]. Nvidia is currently the only vendor with a working software implementation of [http://www.khronos.org/opencl/ OpenCL]; other possible OpenCL-platforms like [http://www-03.ibm.com/technology/cell/ IBM's Cell B.E.] (that powers the Playstation 3) are still waiting for supporting drivers.


= Compiling from sources =

Compiling from source-code is the preferred way of getting Pyrit onto your system. Linux users running a binary distribution may need to install the development packages for [http://www.python.org Python] (e.g. _python-devel_), [http://www.openssl.org/ OpenSSL] (e.g. _openssl-devel_ or _libssl-dev_) and [http://zlib.net/ Zlib] (e.g. _zlib-devel_). You also need a C-compiler like _gcc_. Users of MacOS probably only need to have [http://developer.apple.com/TOOLS/Xcode/ Xcode] installed.

From time to time Pyrit get's packed into (hopefully) stable packages. In general you should download, compile and install these source-code packages from the [http://code.google.com/p/pyrit/downloads/list Download] area.
The more adventurous among you may instead want to try the latest source-code in Pyrit's repository. The code in [http://pyrit.googlecode.com/svn/trunk/ svn-trunk] may include more features and provide better performance but also may cause random problems or even not compile at all. Use the fixed packages when in doubt.

=== Stable: Source-code from fixed packages ===

Download the source-code package for Pyrit and (optionally) a extension-module.

  * Pyrit (required): [http://pyrit.googlecode.com/files/Pyrit-0.2.3.tar.gz Version 0.2.3]
  * CPyrit-CUDA (optional, for Nvidia-hardware): [http://pyrit.googlecode.com/files/CPyrit-CUDA-0.2.3.tar.gz Version 0.2.3]
  * CPyrit-Stream (optional, for ATI-hardware): [http://pyrit.googlecode.com/files/CPyrit-Stream-0.2.3.tar.gz Version 0.2.3]
  * CPyrit-OpenCL (optional, for compatible hardware): [http://pyrit.googlecode.com/files/CPyrit-OpenCL-0.2.3.tar.gz Version 0.2.3]

Now unpack the source-code into a new directory like this:
{{{
tar xvzf Pyrit-0.2.3.tar.gz
tar xvzf CPyrit-CUDA-0.2.3.tar.gz
}}}

Continue with the compiling as explained below.

=== Adventurous: Source-code from svn-trunk ===

You need to install a _subversion_-client before you can use Pyrit's source-code repository; most Linux distributions provide a package for that. Do the initial checkout from svn-trunk like this:
{{{
svn checkout http://pyrit.googlecode.com/svn/trunk/ pyrit_svn
}}}

This will create a new directory _'pyrit_svn'_ that holds all of Pyrit's latest source-code. Execute {{{ svn update }}} inside that directory to keep track of changes.

=== Compiling and installing ===

==== ... the main module ====

Switch to the main module's directory which should be 'Pyrit-0.2.3' (if you used a source-code package) or 'pyrit_svn/pyrit' (if you're on svn). We use Python's _distutils_ to compile and install the code:

{{{
cd Pyrit-0.2.3
python setup.py build
}}}

If everything went well and no errors are thrown at you, use _distutils_ again to install Pyrit:

{{{
sudo python setup.py install
}}}

You can now execute 'pyrit' from your commandline; leave the source-code's directory before doing so to prevent Python from getting confused with module-lookups.

==== ... support for Nvidia-CUDA ====

Get yourself a copy of the CUDA-*Toolkit* from [http://www.nvidia.com/object/cuda_get.html]. You need to modify either _$PATH_ and _ldconfig_ or setup.py if you choose not to install the Toolkit into either '/usr/local/cuda' or '/opt/cuda' so CPyrit-CUDA's installation routine can find Nvidia's compiler 'nvcc'. 

Switch to the directory holding CPyrit-CUDA's source-code and compile and install it just like you did with Pyrit:

{{{
cd CPyrit-CUDA-0.2.3
python setup.py build
sudo python setup.py install
}}}

You also need to have Nvidia's proprietary hardware-drivers installed in the way that fits your OS.

==== ... support for ATI-Stream ====

Download the ATI-Stream SDK from [http://developer.amd.com/gpu/ATIStreamSDK/Pages/default.aspx here] and install it. You need to modify setup.py or modify _$PATH_ and _ldconfig_ if you choose not to install into either '/usr/local/atibrook/sdk' or '/opt/atibrook/sdk'. As ATI's software is (once again) of extremely bad quality, you probably need to apply a series of workarounds for common bugs in the Stream-SDK. See [http://pyrit.wordpress.com/2009/02/12/compiling-amd-stream-core-with-g-43/ here], [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=521323 here] and [http://developer.amd.com/support/KnowledgeBase/Lists/KnowledgeBase/DispForm.aspx?ID=28 here]. Building CPyrit-Stream requires a C++-compiler which should be provided by your distribution (e.g. _gcc-c++_).

Switch to the directory holding CPyrit-Stream's source-code and compile and install it just like you did with Pyrit:

{{{
cd CPyrit-Stream-0.2.3
python setup.py build
sudo python setup.py install
}}}

You also need to have ATI's proprietary hardware-drivers 'fglrx' installed in the way that fits your OS.

==== ... support for OpenCL ====

Vendor-support for OpenCL is in a very early stage and currently Nvidia is the only provider of [http://www.nvidia.com/object/cuda_opencl.html a working OpenCL environment]. Other hardware-platforms, including [http://www-03.ibm.com/technology/cell/ IBM's Cell B.E.], should however support OpenCL in the near future.

You can use Pyrit's OpenCL-core if you happen to have a working OpenCL-environment:
{{{
cd CPyrit-OpenCL-0.2.3
python setup.py build
sudo python setup.py install
}}}

Please notice that the OpenCL-Core is not used for Nvidia-GPUs if CPyrit-CUDA is also installed.

= Using binary packages =

Binary packages are not directly supported. Festor maintains a package repository that includes Pyrit-builds for [http://www.ubuntu.org Ubuntu 9.04]. The [http://www.pentoo.ch/ Pentoo-] and the [http://www.remote-exploit.org/backtrack.html Backtrack4]-LiveCD also include Pyrit.

== Ubuntu 9.04 ==

Festor maintains packages for Pyrit in his [https://launchpad.net/~festor/+archive/hack-tools Personal Package Archive]. You need to create a third-party software repository and add Festor's public key to your keyring so you can install Pyrit and it's extension modules via _apt-get_. Click through _System_ -> _Administraton_ -> _Software Sources_ in GNOME's menu and add the following APT in the _Third-Party Software_ tab:

{{{ deb http://ppa.launchpad.net/festor/hack-tools/ubuntu jaunty main }}}

Ubuntu may complain about missing signing-keys which you can safely ignore for now. Open a terminal, add Festor's public key *619BA177* to your keyring and update _apt-get_'s package list:

{{{
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 619BA177
sudo apt-get update
}}}

You can now install the main package 'pyrit' and the extension modules 'pyrit-cuda' and 'pyrit-stream'. You need to enable the _Restricted_-repository to access the proprietary drivers if you want to use either [http://www.nvidia.com/object/cuda_home.html Nvidia-CUDA] or [http://www.amd.com/US/PRODUCTS/TECHNOLOGIES/STREAM-TECHNOLOGY/Pages/stream-technology.aspx ATI-Stream].

For example, to download and install the main module:
{{{
sudo apt-get install pyrit
}}}

For example, to download and install support for [http://www.amd.com/US/PRODUCTS/TECHNOLOGIES/STREAM-TECHNOLOGY/Pages/stream-technology.aspx ATI-Stream]:
{{{
sudo apt-get install xorg-driver-fglrx pyrit-stream
}}}

For example, to download and install support for [http://www.nvidia.com/object/cuda_home.html Nvidia-CUDA]:
{{{
sudo apt-get install nvidia-glx-180 pyrit-cuda
}}}

*Please notice that [https://launchpad.net/~festor/+archive/hack-tools this third-party repository] is not maintained by the author of Pyrit.*